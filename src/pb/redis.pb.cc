// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redis.proto

#include "redis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_redis_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_redis_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RedisReply;
}  // namespace protobuf_redis_2eproto
namespace neb {
class RedisReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedisReply>
      _instance;
} _RedisReply_default_instance_;
}  // namespace neb
namespace protobuf_redis_2eproto {
static void InitDefaultsRedisReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::neb::_RedisReply_default_instance_;
    new (ptr) ::neb::RedisReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::neb::RedisReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RedisReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRedisReply}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RedisReply.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::neb::RedisReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::neb::RedisReply, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::neb::RedisReply, integer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::neb::RedisReply, str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::neb::RedisReply, element_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::neb::RedisReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::neb::_RedisReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "redis.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013redis.proto\022\003neb\"Z\n\nRedisReply\022\014\n\004type"
      "\030\001 \001(\005\022\017\n\007integer\030\002 \001(\003\022\013\n\003str\030\003 \001(\014\022 \n\007"
      "element\030\004 \003(\0132\017.neb.RedisReply*\230\001\n\013E_RED"
      "IS_ERR\022\014\n\010REDIS_OK\020\000\022\020\n\014REDIS_ERR_IO\020\001\022\023"
      "\n\017REDIS_ERR_OTHER\020\002\022\021\n\rREDIS_ERR_EOF\020\003\022\026"
      "\n\022REDIS_ERR_PROTOCOL\020\004\022\021\n\rREDIS_ERR_OOM\020"
      "\005\022\026\n\tREDIS_ERR\020\377\377\377\377\377\377\377\377\377\001*\265\001\n\rE_REDIS_RE"
      "PLY\022\030\n\024REDIS_REPLY_UNDEFINE\020\000\022\026\n\022REDIS_R"
      "EPLY_STRING\020\001\022\025\n\021REDIS_REPLY_ARRAY\020\002\022\027\n\023"
      "REDIS_REPLY_INTEGER\020\003\022\023\n\017REDIS_REPLY_NIL"
      "\020\004\022\026\n\022REDIS_REPLY_STATUS\020\005\022\025\n\021REDIS_REPL"
      "Y_ERROR\020\006b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 457);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "redis.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_redis_2eproto
namespace neb {
const ::google::protobuf::EnumDescriptor* E_REDIS_ERR_descriptor() {
  protobuf_redis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_redis_2eproto::file_level_enum_descriptors[0];
}
bool E_REDIS_ERR_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* E_REDIS_REPLY_descriptor() {
  protobuf_redis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_redis_2eproto::file_level_enum_descriptors[1];
}
bool E_REDIS_REPLY_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RedisReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedisReply::kTypeFieldNumber;
const int RedisReply::kIntegerFieldNumber;
const int RedisReply::kStrFieldNumber;
const int RedisReply::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedisReply::RedisReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_redis_2eproto::scc_info_RedisReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.RedisReply)
}
RedisReply::RedisReply(const RedisReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      element_(from.element_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.str().size() > 0) {
    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  ::memcpy(&integer_, &from.integer_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&integer_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:neb.RedisReply)
}

void RedisReply::SharedCtor() {
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&integer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&integer_)) + sizeof(type_));
}

RedisReply::~RedisReply() {
  // @@protoc_insertion_point(destructor:neb.RedisReply)
  SharedDtor();
}

void RedisReply::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RedisReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RedisReply::descriptor() {
  ::protobuf_redis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_redis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedisReply& RedisReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_redis_2eproto::scc_info_RedisReply.base);
  return *internal_default_instance();
}


void RedisReply::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.RedisReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&integer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&integer_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool RedisReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.RedisReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 integer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &integer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes str = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .neb.RedisReply element = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.RedisReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.RedisReply)
  return false;
#undef DO_
}

void RedisReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.RedisReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // int64 integer = 2;
  if (this->integer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->integer(), output);
  }

  // bytes str = 3;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->str(), output);
  }

  // repeated .neb.RedisReply element = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->element_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->element(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:neb.RedisReply)
}

::google::protobuf::uint8* RedisReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:neb.RedisReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // int64 integer = 2;
  if (this->integer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->integer(), target);
  }

  // bytes str = 3;
  if (this->str().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->str(), target);
  }

  // repeated .neb.RedisReply element = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->element_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->element(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:neb.RedisReply)
  return target;
}

size_t RedisReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:neb.RedisReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .neb.RedisReply element = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->element_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->element(static_cast<int>(i)));
    }
  }

  // bytes str = 3;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->str());
  }

  // int64 integer = 2;
  if (this->integer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->integer());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedisReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.RedisReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RedisReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedisReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.RedisReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.RedisReply)
    MergeFrom(*source);
  }
}

void RedisReply::MergeFrom(const RedisReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.RedisReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from.integer() != 0) {
    set_integer(from.integer());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RedisReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.RedisReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisReply::CopyFrom(const RedisReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.RedisReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisReply::IsInitialized() const {
  return true;
}

void RedisReply::Swap(RedisReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedisReply::InternalSwap(RedisReply* other) {
  using std::swap;
  CastToBase(&element_)->InternalSwap(CastToBase(&other->element_));
  str_.Swap(&other->str_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(integer_, other->integer_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RedisReply::GetMetadata() const {
  protobuf_redis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_redis_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace neb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::neb::RedisReply* Arena::CreateMaybeMessage< ::neb::RedisReply >(Arena* arena) {
  return Arena::CreateInternal< ::neb::RedisReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
