// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: report.proto

#ifndef PROTOBUF_INCLUDED_report_2eproto
#define PROTOBUF_INCLUDED_report_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_report_2eproto 

namespace protobuf_report_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_report_2eproto
namespace neb {
class Report;
class ReportDefaultTypeInternal;
extern ReportDefaultTypeInternal _Report_default_instance_;
class ReportRecord;
class ReportRecordDefaultTypeInternal;
extern ReportRecordDefaultTypeInternal _ReportRecord_default_instance_;
}  // namespace neb
namespace google {
namespace protobuf {
template<> ::neb::Report* Arena::CreateMaybeMessage<::neb::Report>(Arena*);
template<> ::neb::ReportRecord* Arena::CreateMaybeMessage<::neb::ReportRecord>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace neb {

// ===================================================================

class ReportRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neb.ReportRecord) */ {
 public:
  ReportRecord();
  virtual ~ReportRecord();

  ReportRecord(const ReportRecord& from);

  inline ReportRecord& operator=(const ReportRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportRecord(ReportRecord&& from) noexcept
    : ReportRecord() {
    *this = ::std::move(from);
  }

  inline ReportRecord& operator=(ReportRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportRecord* internal_default_instance() {
    return reinterpret_cast<const ReportRecord*>(
               &_ReportRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReportRecord* other);
  friend void swap(ReportRecord& a, ReportRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportRecord* New() const final {
    return CreateMaybeMessage<ReportRecord>(NULL);
  }

  ReportRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportRecord& from);
  void MergeFrom(const ReportRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 value = 2;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::uint64 value(int index) const;
  void set_value(int index, ::google::protobuf::uint64 value);
  void add_value(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_value();

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:neb.ReportRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > value_;
  mutable int _value_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_report_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Report : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neb.Report) */ {
 public:
  Report();
  virtual ~Report();

  Report(const Report& from);

  inline Report& operator=(const Report& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Report(Report&& from) noexcept
    : Report() {
    *this = ::std::move(from);
  }

  inline Report& operator=(Report&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Report& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Report* internal_default_instance() {
    return reinterpret_cast<const Report*>(
               &_Report_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Report* other);
  friend void swap(Report& a, Report& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Report* New() const final {
    return CreateMaybeMessage<Report>(NULL);
  }

  Report* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Report>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Report& from);
  void MergeFrom(const Report& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Report* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .neb.ReportRecord records = 1;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 1;
  ::neb::ReportRecord* mutable_records(int index);
  ::google::protobuf::RepeatedPtrField< ::neb::ReportRecord >*
      mutable_records();
  const ::neb::ReportRecord& records(int index) const;
  ::neb::ReportRecord* add_records();
  const ::google::protobuf::RepeatedPtrField< ::neb::ReportRecord >&
      records() const;

  // @@protoc_insertion_point(class_scope:neb.Report)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::neb::ReportRecord > records_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_report_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReportRecord

// bytes key = 1;
inline void ReportRecord::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportRecord::key() const {
  // @@protoc_insertion_point(field_get:neb.ReportRecord.key)
  return key_.GetNoArena();
}
inline void ReportRecord::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.ReportRecord.key)
}
#if LANG_CXX11
inline void ReportRecord::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:neb.ReportRecord.key)
}
#endif
inline void ReportRecord::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.ReportRecord.key)
}
inline void ReportRecord::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.ReportRecord.key)
}
inline ::std::string* ReportRecord::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:neb.ReportRecord.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportRecord::release_key() {
  // @@protoc_insertion_point(field_release:neb.ReportRecord.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportRecord::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:neb.ReportRecord.key)
}

// repeated uint64 value = 2;
inline int ReportRecord::value_size() const {
  return value_.size();
}
inline void ReportRecord::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::uint64 ReportRecord::value(int index) const {
  // @@protoc_insertion_point(field_get:neb.ReportRecord.value)
  return value_.Get(index);
}
inline void ReportRecord::set_value(int index, ::google::protobuf::uint64 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:neb.ReportRecord.value)
}
inline void ReportRecord::add_value(::google::protobuf::uint64 value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:neb.ReportRecord.value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ReportRecord::value() const {
  // @@protoc_insertion_point(field_list:neb.ReportRecord.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ReportRecord::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:neb.ReportRecord.value)
  return &value_;
}

// -------------------------------------------------------------------

// Report

// repeated .neb.ReportRecord records = 1;
inline int Report::records_size() const {
  return records_.size();
}
inline void Report::clear_records() {
  records_.Clear();
}
inline ::neb::ReportRecord* Report::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:neb.Report.records)
  return records_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::neb::ReportRecord >*
Report::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:neb.Report.records)
  return &records_;
}
inline const ::neb::ReportRecord& Report::records(int index) const {
  // @@protoc_insertion_point(field_get:neb.Report.records)
  return records_.Get(index);
}
inline ::neb::ReportRecord* Report::add_records() {
  // @@protoc_insertion_point(field_add:neb.Report.records)
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::neb::ReportRecord >&
Report::records() const {
  // @@protoc_insertion_point(field_list:neb.Report.records)
  return records_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace neb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_report_2eproto
